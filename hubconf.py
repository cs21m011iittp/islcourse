# -*- coding: utf-8 -*-
"""exercise4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SAgUb_BH4dENeKb8QvUWxsxPgiK6Kf3M
"""

!pip install torchmetrics

import torch
from torch import nn
from torch.utils.data import Dataset, DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor, ToPILImage
from PIL import Image
import torch.nn.functional as F
import torch.optim as optim
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix, precision_score

"""# Loading the data"""

def load_data():
    #download the train and test datasets
    train_data=datasets.FashionMNIST(root='data',
                                     train=True,
                                     download=True,
                                     transform=ToTensor())
    
    test_data=datasets.FashionMNIST(root='data',
                                    train=False,
                                    download=True,
                                    transform=ToTensor())
    
    return train_data,test_data

train_data,test_data=load_data()

print('size of X vector: ',train_data[0][0].shape)
print('size of Y vector:',len(set([y for x,y in train_data])))

"""# Creating the dataloaders"""

def create_dataloaders(train_data,test_data,batch_size):
    train_dataloader=DataLoader(train_data,batch_size=batch_size)
    test_dataloader=DataLoader(test_data,batch_size=batch_size)

    return train_dataloader,test_dataloader

train_loader,test_loader=create_dataloaders(train_data,test_data,batch_size=32)

"""# invoking the **hubconf.py** file from Github repo"""

examplerollnum = 'cs21m011'

examplerepo = examplerollnum + 'iittp/islcourse:exercise3'

entrypoints = torch.hub.list(examplerepo,force_reload=True)

print (entrypoints)

train_data_loader1 = train_loader
test_data_loader1 = test_loader

model = torch.hub.load(examplerepo,'get_model',train_loader=train_data_loader1,num_epochs=5, force_reload=True)
# config1 = [(1,10,(3,3),1,'same'), (10,3,(5,5),1,'same'), (3,1,(7,7),1,'same')]
# model = torch.hub.load(examplerepo,'get_model_advanced',train_data_loader=train_data_loader1,n_epochs=10, lr=1e-4,config=config1, force_reload=True)

print (model)

#test_data_loader1 = None

#a,p,r,f1 = torch.hub.load(examplerepo,'test_model',model1=model,test_data_loader=test_data_loader1,force_reload=True)

#print (a,p,r,f1)

test_data_loader1 = test_loader

a,p,r,f1=torch.hub.load(examplerepo,'test_model',model1=model,test_data_loader=test_data_loader1,force_reload=True)

print(f'Accuracy: {a:.4f}')
print(f'Precision: {p:.4f}')
print(f'Recall: {r:.4f}')
print(f'F1 score: {f1:.4f}')
